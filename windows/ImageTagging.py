# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Therm Tools
#                                  A QGIS plugin
#  This window has access to Tools for Therm application.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from qgis.PyQt.QtCore import Qt, QCoreApplication
from qgis.PyQt import QtWidgets, uic
from qgis.core import Qgis
from ..constants import THERMAL_TAGGING_URL

import os
import tempfile
import requests


class ThermImageTaggingWidget(QtWidgets.QWidget):

    def __init__(self, thermtool_obj, iface):
        """Constructor."""
        super(ThermImageTaggingWidget, self).__init__()
        uic.loadUi(os.path.join(os.path.dirname(__file__), 'ImageTagging.ui'), self)
        self.canvas_logger = thermtool_obj.canvas_logger
        self.logger = thermtool_obj.logger
        self.thermToolobj = thermtool_obj
        self.iface = iface
        self.canvas =self.iface.mapCanvas()
        self.existing_files = self.thermToolobj.existing_files
        self.project = thermtool_obj.project
        self.project_details = self.project.project_details
        self.core_token = self.project.core_token
        self.project_uid = self.project.project_details["uid"]
        self.canvas =self.iface.mapCanvas()

        self.runButton.clicked.connect(self.image_tagging)
        self.imagetaggingType.currentTextChanged.connect(self.current_type)
        self.MagmaConversion.setChecked(True)

        # self.existing_files = self.thermToolobj.existing_files
        # self.temp_option.addItems(self.existing_files)
        self.temp_option.addItems(self.existing_files)
        self.No_images.setValue(4)
        self.No_images.setMaximum(4)
        self.No_images.setMinimum(1)


    def api(self, json):
        canvas  = self.canvas
        rotation = canvas.rotation()
        json['angle'] = rotation
        print(json)
        url =  THERMAL_TAGGING_URL + "/tag" # Update depolyed (tagging) api url
        headers = {'Authorization': f'Token {self.core_token}'}
        imagetag = requests.post(url, json=json, headers=headers)
        if imagetag.status_code == 200:
            self.runButton.setEnabled(True)
            self.canvas_logger('Queued Successfully.',level=Qgis.Success)
        else:
            self.runButton.setEnabled(True)
            self.canvas_logger(f'Failed to Queue {imagetag.status_code}, {imagetag.json()}',level=Qgis.Warning)


    def current_type(self, value):
        if value == 'ThermLite Tagging' or value == 'Thermal Tagging':
            self.MagmaConversion.setChecked(True)
            self.IssueCropImage.setChecked(False)
            self.projectUid.setEnabled(False)
            self.IssueCropImage.setEnabled(False)
            self.MagmaConversion.setEnabled(True)
            self.temp_option.setEnabled(True)
            self.No_images.setEnabled(True)
            self.No_images.setValue(4)
        elif value == 'Visual Tagging':
            self.MagmaConversion.setChecked(False)
            self.IssueCropImage.setChecked(False)
            self.projectUid.setEnabled(True) 
            self.IssueCropImage.setEnabled(False)
            self.MagmaConversion.setEnabled(False)
            self.temp_option.setEnabled(False)
            self.No_images.setEnabled(True)
            self.No_images.setValue(4)
            self.projectUid.setText('')
        elif value == 'SiteMap Tagging':
            self.MagmaConversion.setChecked(True)
            self.IssueCropImage.setChecked(True)
            self.projectUid.setEnabled(False)
            self.IssueCropImage.setEnabled(True)
            self.MagmaConversion.setEnabled(True)
            self.temp_option.setEnabled(False)
            self.No_images.setEnabled(False)
        elif value == 'Temp Extraction':
            self.MagmaConversion.setChecked(False)
            self.IssueCropImage.setChecked(False)
            self.projectUid.setEnabled(False)
            self.IssueCropImage.setEnabled(False)
            self.MagmaConversion.setEnabled(False)
            self.temp_option.setEnabled(True)
            self.No_images.setEnabled(False)

        print("combobox changed", value)

    def image_tagging(self): 
        self.runButton.setEnabled(False)
        if self.MagmaConversion.isChecked():magma_image = True
        else : magma_image = False
        if self.IssueCropImage.isChecked():crop_image = True
        else: crop_image = False
        no_images = self.No_images.value()
        temp_file = self.temp_option.currentText()

        org = self.project_details['organization']['uid']
        if self.imagetaggingType.currentText() == 'Visual Tagging':
            if not self.projectUid.text() :
                self.canvas_logger('Visual Project_uid field is empty....',level=Qgis.Warning)
            else:
                json = {'projectUid': self.project_uid, 'method':2, 'VprojectUid': self.projectUid.text(), 'org':org,
                        'magma_image':magma_image, 'crop_image':crop_image, 'No_images':no_images, 'temp_file':'None'}
                self.api(json)
         
        elif self.imagetaggingType.currentText() == 'Thermal Tagging':
            json = {'projectUid': self.project_uid, 'method':1, 'VprojectUid':None,'org':org,
                    'magma_image':magma_image,'crop_image':crop_image, 'No_images':no_images, 'temp_file':temp_file}
            self.api(json)
           
        elif self.imagetaggingType.currentText() == 'ThermLite Tagging':
            json ={'projectUid': self.project_uid, 'method':2, 'VprojectUid':None,'org':org,
                   'magma_image':magma_image, 'crop_image':crop_image,'No_images':no_images,'temp_file':temp_file}
            self.api(json)
            
        elif self.imagetaggingType.currentText() == 'SiteMap Tagging':
            json ={'projectUid': self.project_uid, 'method':3, 'VprojectUid': None,'org':org,
                   'magma_image':magma_image, 'crop_image':crop_image, 'No_images':no_images, 'temp_file':'None'}
            self.api(json) 
        
        elif self.imagetaggingType.currentText() == 'Temp Extraction':
            json ={'projectUid': self.project_uid, 'method':4, 'VprojectUid': None,'org':org,
                   'magma_image':magma_image, 'crop_image':crop_image, 'No_images':no_images, 'temp_file':temp_file}
            self.api(json) 


    

