# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Therm Tools
#                                  A QGIS plugin
#  This window has access to Tools for Therm application.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from qgis.PyQt.QtCore import Qt, QCoreApplication
from qgis.PyQt import QtWidgets, uic
from qgis.core import Qgis, QgsVectorLayer, QgsProject, QgsTask, QgsApplication, QgsMessageLog
from ..windows.ImageTagging_utils import loadImageMetaData, responejsonTogeojon

import os
import tempfile
import json

IMAGE_TAGGING_UI, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'ImageTagging.ui'))


class ThermImageTaggingWindow(QtWidgets.QDockWidget, IMAGE_TAGGING_UI):

    def __init__(self, thermToolobj, iface):
        """Constructor."""
        super(ThermImageTaggingWindow, self).__init__()
        self.setupUi(self)
        self.thermToolobj = thermToolobj
        self.iface = iface
        self.canvas =self.iface.mapCanvas()
        self.project_details = self.thermToolobj.project_details
        self.core_token = self.thermToolobj.core_token
        self.project_uid = self.thermToolobj.project_uid
        self.awsinfo = None
        self.camermodel = None


        self.backButtoN.clicked.connect(self.show_thermTool_Window)
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self)
        self.runButton.clicked.connect(self.image_tagging)

    def show_thermTool_Window(self):
        self.thermToolobj.show()
        self.hide()

    def logger(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'SenseHawk QC', level=level)

    def load_vlayer(self, load_task_status, imageMetaData ):
        result = imageMetaData.returned_values
        if not result:
            self.logger("load failed ...", level=Qgis.Warning)
            return None
        geojsonpath = result['geojson_path']
        Player = QgsVectorLayer(geojsonpath, geojsonpath, "ogr")
        QgsProject.instance().addMapLayer(Player)


    def image_tagging(self):
        if self.visualTagging.isChecked():
            imageMetaData = QgsTask.fromFunction("Download", loadImageMetaData, thermliteobj=self)
            QgsApplication.taskManager().addTask(imageMetaData)
            imageMetaData.statusChanged.connect(lambda load_task_status: self.load_vlayer(load_task_status, imageMetaData))
        
        elif self.thermlite_tagging.isChecked():
            self.projectUid.insert(self.thermToolobj.project_uid)
            reports = self.project_details['reports'] 
            geojson_path = responejsonTogeojon(reports, thermliteobj=self)
            Player = QgsVectorLayer(geojson_path, geojson_path, "ogr")
            QgsProject.instance().addMapLayer(Player)

