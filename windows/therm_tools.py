# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Therm Tools
#                                  A QGIS plugin
#  This window has access to Tools for Therm application.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from qgis.PyQt.QtCore import Qt
from qgis.PyQt import QtWidgets, uic
import qgis
from qgis.core import QgsMessageLog, Qgis, QgsApplication, QgsTask, QgsFeatureRequest, QgsPoint

from ..event_filters import KeypressFilter, KeypressEmitter, KeypressShortcut, MousepressFilter
from ..sensehawk_apis.core_apis import save_project_geojson, get_project_geojson
from ..sensehawk_apis.sid_apis import detect_solar_issues
from ..windows.autoNumbering import ThermNumberingWidget
from ..windows.ImageTagging import ThermImageTaggingWidget
from ..windows.thermliteQc import ThermliteQcWindow
from ..windows.therm_viewer import ThermViewerDockWidget
from ..tasks import clipRequest
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QKeySequence

import os
import json


class ThermToolsWidget(QtWidgets.QWidget):

    def __init__(self, project):
        """Constructor."""
        super(ThermToolsWidget, self).__init__()
        uic.loadUi(os.path.join(os.path.dirname(__file__), 'therm_tools.ui'), self)
        self.project = project
        self.parent = self.project.project_tab
        self.iface = self.project.iface
        self.existing_files = self.project.existing_files
        self.canvas = self.iface.mapCanvas()
        self.StringNumberButton.clicked.connect(self.string_numbering)
        self.imagetaggingButton.clicked.connect(self.ImageTagging)
        self.thermliteQcButton.clicked.connect(self.ThermliteTagging)
        self.viewer_button.clicked.connect(self.therm_viewer)
        self.clipButton.clicked.connect(self.clip_raster)
        self.class_maps = self.project.class_maps
        self.core_token = self.project.core_token
        self.project_details = self.project.project_details
        self.numbering_widget = None
        self.imagetagging_widget = None
        self.thermlite_tagging_widget = None
        self.therm_viewer_widget = None
    
    def clipraster_callback(self, clip_status, clip_task):
        if clip_status != 3:
            return None
        result = clip_task.returned_values
        print('sucess...')

    def clip_raster(self):
        
        self.uncheck_all_buttons()
        self.clipButton.setChecked(True)

        clip_task_input = {'project_details':self.project_details,
                             'geojson_path':self.project.geojson_path,
                             'class_maps':self.class_maps,
                             'core_token':self.core_token,
                             'project_type':'therm',
                             'email_id': self.project.user_email}
        
        clip_task = QgsTask.fromFunction("Clip Raster", clipRequest ,clip_task_input)
        QgsApplication.taskManager().addTask(clip_task)
        clip_task.statusChanged.connect(lambda clip_status : self.clipraster_callback(clip_status, clip_task))


    def string_numbering(self):
        self.project.active_docktool_widget.hide()
        if not self.numbering_widget:
            self.numbering_widget = ThermNumberingWidget(self, self.iface)
        if self.project.active_tool_widget != self.numbering_widget:
            self.project.active_tool_widget.hide()
            self.project.project_tab_layout.replaceWidget(self.project.active_tool_widget, self.numbering_widget)
        self.project.active_tool_widget = self.numbering_widget
        self.numbering_widget.show()
        self.uncheck_all_buttons()
        self.StringNumberButton.setChecked(True)
        if self.thermlite_tagging_widget:
            self.thermlite_tagging_widget.hide()

    def ImageTagging(self):
        self.project.active_docktool_widget.hide()
        if not self.imagetagging_widget:
            self.imagetagging_widget = ThermImageTaggingWidget(self, self.iface)
        if self.project.active_tool_widget != self.imagetagging_widget:
            self.project.active_tool_widget.hide()
            self.project.project_tab_layout.replaceWidget(self.project.active_tool_widget, self.imagetagging_widget)
        self.project.active_tool_widget = self.imagetagging_widget
        self.imagetagging_widget.show()
        self.uncheck_all_buttons()
        self.imagetaggingButton.setChecked(True)
        if self.thermlite_tagging_widget:
            self.thermlite_tagging_widget.hide()

    def ThermliteTagging(self):
        self.project.active_tool_widget.hide()
        if not self.thermlite_tagging_widget:
            self.thermlite_tagging_widget = ThermliteQcWindow(self, self.project)
        self.project.active_docktool_widget.setWidget(self.thermlite_tagging_widget)         
        self.project.active_docktool_widget.show()
        self.uncheck_all_buttons()
        self.thermliteQcButton.setChecked(True)
    
    def therm_viewer(self):
        self.project.active_tool_widget.hide()
        if not self.therm_viewer_widget:
            self.therm_viewer_widget = ThermViewerDockWidget(self, self.project)
        self.project.active_docktool_widget.setWidget(self.therm_viewer_widget)
        self.project.active_docktool_widget.show()
        self.uncheck_all_buttons()
        self.viewer_button.setChecked(True)

    def uncheck_all_buttons(self):
        for button in self.findChildren(QtWidgets.QPushButton):
            if button.isCheckable():
                button.setChecked(False)
    def detect(self):
        map_angle = self.canvas.rotation()
        self.logger("Map canvas angle: {}".format(map_angle))
        self.logger(str(self.project_details))
        def detect_task(task, detect_task_inputs):
            project_details, angle, core_token, user_email = detect_task_inputs
            status = detect_solar_issues(project_details, angle, core_token, user_email)
            return {"task": task.description(),
                    "status": status.json()}
        def callback(task, logger):
            returned_values = task.returned_values
            if returned_values:
                status = returned_values["status"]
                logger(str(status))

        dt = QgsTask.fromFunction("Detect Solar Issues", detect_task, detect_task_inputs=[self.project_details,
                                                                                          map_angle, self.core_token,
                                                                                          self.load_window.user_email])
        QgsApplication.taskManager().addTask(dt)
        dt.statusChanged.connect(lambda: callback(dt, self.logger))

    def logger(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'SenseHawk QC', level=level)
