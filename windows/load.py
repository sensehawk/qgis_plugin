# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  LoadSave
#                                  A QGIS plugin
#  This window can be used to load and save SenseHawk projects needing quality check.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from ..sensehawk_apis.core_apis import get_ortho_tiles_url, get_project_geojson, save_project_geojson, get_project_details
from ..sensehawk_apis.terra_apis import get_terra_classmaps

from ..utils import download_file, categorize_layer, load_vectors, combined_geojson

from ..windows.terra_tools import TerraToolsWindow

import os
import json
import tempfile
import json

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer, QgsRectangle, QgsFeature, \
    QgsGeometry, QgsField, QgsCategorizedSymbolRenderer
from qgis.PyQt.QtCore import Qt, QVariant
from qgis.gui import QgsMessageBar
import qgis
from qgis.utils import iface
import time
import requests


LOAD_SAVE_UI, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'load_save.ui'))


class LoadSaveWindow(QtWidgets.QDockWidget, LOAD_SAVE_UI):
    def __init__(self, core_token, iface):
        """Constructor."""
        super(LoadSaveWindow, self).__init__()
        self.setupUi(self)
        self.loadProject.clicked.connect(self.load_project)
        self.project_type = None
        self.project_uid = None
        self.geojson_paths = []
        self.core_token = core_token
        self.project_details = None
        self.tools_window = None
        self.iface = iface
        # Add to the left docking area by default
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self)
        self.terra_tools_window = None
        self.qgis_project = QgsProject.instance()
        self.bounds = None
        self.class_maps = None
        self.class_groups = None
        self.load_successful = False
        self.loaded_feature_count = 0

    def logger(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'SenseHawk QC', level=level)

    def load_project(self):
        self.project_type = self.projectType.currentText().lower()
        self.logger('Loading SenseHawk {} project...'.format(self.project_type))
        self.project_uid = self.projectUid.text()
        self.logger('UID specified: {}'.format(self.project_uid))
        if not self.project_uid:
            self.logger('Please specify project UID', level=Qgis.Warning)
            return None

        # Get project details from core
        self.project_details = get_project_details(self.project_uid, self.core_token)
        if not self.project_details:
            self.logger('Project not found', level=Qgis.Warning)
            return None

        # Get the class maps for vectors from terra / therm
        if self.project_type == "terra":
            self.class_maps, self.class_groups = get_terra_classmaps(self.project_details, self.core_token)

        # Get base url for ortho tiles
        base_orthotiles_url = get_ortho_tiles_url(self.project_uid, self.core_token)

        # Get metadata from the base url
        ortho_tiles_details = requests.request("GET", base_orthotiles_url).json()
        ortho_bounds = ortho_tiles_details["bounds"]
        self.bounds = ortho_bounds

        zmax = ortho_tiles_details["maxzoom"]
        zmin = ortho_tiles_details["center"][-1]

        orthotiles_url = "type=xyz&url=" + \
                         base_orthotiles_url + "/{z}/{x}/{y}.png" + \
                         "&zmax={}&zmin={}".format(zmax, zmin)
        self.logger("Ortho tiles url: {}...".format(orthotiles_url))

        # Load ortho tiles from url
        rlayer = QgsRasterLayer(orthotiles_url, self.project_uid + "_ortho", 'wms')
        self.qgis_project.addMapLayer(rlayer)

        # Load vectors
        self.geojson_paths, self.loaded_feature_count = load_vectors(self.qgis_project, self.project_details, self.project_type, self.class_maps,
                                          self.class_groups,
                                          self.bounds, self.core_token, self.logger)

        # Set load_successful variable to True
        self.logger("Successfully loaded project...")
        self.load_successful = True

        # Show tools window
        self.show_tools_window()

    def show_tools_window(self):
        # Load the correct tools window
        if self.project_type == "terra" and self.load_successful:
            if not self.terra_tools_window:
                # Initialize terra tools window
                self.tools_window = TerraToolsWindow(self, iface)
                self.tools_window.show()
            else:
                self.terra_tools_window.show()
        elif self.project_type == "therm" and self.load_successful:
            self.logger("Not implemented...")
        # Hide load save window
        self.hide()

    def closeEvent(self, event):
        event.accept()
        # Delete project geojson
        os.remove(self.geojson_path)


