# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Load
#                                  A QGIS plugin
#  This window can be used to load SenseHawk projects needing quality check.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from ..sensehawk_apis.core_apis import get_ortho_tiles_url, get_project_geojson, get_project_details
from ..sensehawk_apis.terra_apis import get_terra_classmaps

from ..utils import download_file, load_vectors, categorize_layer

from ..tasks import loadTask

from ..windows.terra_tools import TerraToolsWindow
from ..windows.therm_tools import ThermToolsWindow
from ..windows.projectTabs import ProjectTabsWindow

import os
import json
import tempfile
import json

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer, QgsRectangle, QgsFeature, \
    QgsGeometry, QgsField, QgsCategorizedSymbolRenderer, QgsApplication, QgsTask
from qgis.PyQt.QtCore import Qt, QVariant
from qgis.gui import QgsMessageBar
import qgis
from qgis.utils import iface
import time
import requests


LOAD_UI, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'load.ui'))


class LoadWindow(QtWidgets.QDockWidget, LOAD_UI):
    def __init__(self, user_email, core_token, iface):
        """Constructor."""
        super(LoadWindow, self).__init__()
        self.setupUi(self)
        self.loadProject.clicked.connect(self.start_project_load)
        self.toolsButton.clicked.connect(self.show_project_tabs)
        self.project_type = None
        self.project_uid = None
        self.geojson_path = None
        self.core_token = core_token
        self.user_email = user_email
        self.project_details = None
        self.tools_window = None
        self.iface = iface
        # Add to the left docking area by default
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, self)
        self.terra_tools_window = None
        self.therm_tools_window = None
        self.qgis_project = QgsProject.instance()
        self.bounds = None
        self.class_maps = None
        self.class_groups = None
        self.load_successful = False
        self.project_tabs_window = ProjectTabsWindow(self)
        self.loaded_feature_count = 0

    def logger(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'SenseHawk QC', level=level)

    def load_callback(self, load_task_status, load_task):
        new_project_index = len(self.project_tabs_window.projects_loaded)
        if load_task_status != 3:
            return None
        result = load_task.returned_values
        if not result:
            self.logger("Load failed...", level=Qgis.Warning)
            return None
        rlayer = result['rlayer']
        vlayer = result['vlayer']
        feature_counts = result['feature_counts']
        self.class_maps = result['class_maps']
        self.class_groups = result['class_groups']
        self.project_details = result['project_details']

        # Add project to project tab
        self.project_tabs_window.add_project(self.project_details, feature_counts)
        self.project_tabs_window.project_tabs_widget.setCurrentIndex(new_project_index)
        self.show_project_tabs()

        # Add layers to the qgis project
        self.qgis_project.addMapLayer(rlayer)
        self.qgis_project.addMapLayer(vlayer)

        # Apply styling
        self.categorized_renderer = categorize_layer(project_type=self.project_type, class_maps=self.class_maps)

    def start_project_load(self):
        self.project_uid = self.projectUid.text()
        self.project_type = self.projectType.currentText().lower()
        if not self.project_uid:
            self.logger("No project uid given", level=Qgis.Warning)
            return None
        # Load only if it is not already present in project tabs
        if self.project_uid in self.project_tabs_window.projects_loaded:
            self.logger("Project loaded already!")
            project_index = self.project_tabs_window.projects_loaded.index(self.project_uid)
            self.show_project_tabs()
            self.project_tabs_window.project_tabs_widget.setCurrentIndex(project_index)
            return None

        load_task_inputs = {"project_uid": self.project_uid,
                            "project_type": self.project_type,
                            "core_token": self.core_token,
                            "logger": self.logger}
        load_task = QgsTask.fromFunction("Load", loadTask, load_task_inputs)
        QgsApplication.taskManager().addTask(load_task)
        load_task.statusChanged.connect(lambda load_task_status: self.load_callback(load_task_status, load_task))

    def show_project_tabs(self):
        self.hide()
        self.project_tabs_window.show()

    def show_tools_window(self):
        # Load the correct tools window
        if self.project_type == "terra" and self.load_successful:
            if not self.terra_tools_window:
                # Initialize terra tools window
                self.tools_window = TerraToolsWindow(self, self.iface)
                self.tools_window.show()
            else:
                self.terra_tools_window.show()
            # Hide load window
            self.hide()
        elif self.project_type == "therm" and self.load_successful:
            if not self.therm_tools_window:
                # Initialize terra tools window
                self.tools_window = ThermToolsWindow(self, self.iface)
                self.tools_window.show()
            else:
                self.therm_tools_window.show()
            # Hide load window
            self.hide()

    def closeEvent(self, event):
        event.accept()
        # Delete project geojsons
        os.remove(self.geojson_path)


