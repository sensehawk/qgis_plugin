# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  LoadSave
#                                  A QGIS plugin
#  This window can be used to load and save SenseHawk projects needing quality check.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from ..core_apis import get_ortho_tiles_url, get_project_geojson, save_project_geojson, get_project_details
from ..utils import download_file, vlayer_load

import os
import json
import tempfile

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer
from qgis.gui import QgsMessageBar
import qgis
from qgis.utils import iface
import time


LOAD_SAVE_UI, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'load_save.ui'))


class LoadSaveWindow(QtWidgets.QDockWidget, LOAD_SAVE_UI):
    def __init__(self, core_token):
        """Constructor."""
        super(LoadSaveWindow, self).__init__()
        self.setupUi(self)
        self.loadProject.clicked.connect(self.load_project)
        self.saveProject.clicked.connect(self.save_project)
        self.zbutton.clicked.connect(self.z_button)
        self.project_type = None
        self.project_uid = None
        self.geojson_path = None
        self.Modified_json_path = None
        self.core_token = core_token
        self.project_details = None

    def logger(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, 'SenseHawk QC', level=level)

    def load_project(self):
        self.project_type = self.projectType.currentText().lower()
        self.logger('Loading SenseHawk {} project...'.format(self.project_type))
        self.project_uid = self.projectUid.text()
        self.logger('UID specified: {}'.format(self.project_uid))
        if not self.project_uid:
            self.logger('Please specify project UID', level=Qgis.Warning)
            return None

        self.geojson_path = os.path.join(tempfile.gettempdir(), "{}.json".format(self.project_uid))

        # Load ortho tiles
        orthotiles_url = "type=xyz&url=" + get_ortho_tiles_url(self.project_uid, self.core_token) + "/{z}/{x}/{y}.png"
        self.logger("Ortho tiles url: {}...".format(orthotiles_url))
        # Load ortho tiles from url
        rlayer = QgsRasterLayer(orthotiles_url, self.project_uid + "_ortho", 'wms')
        QgsProject.instance().addMapLayer(rlayer)

        # Download vectors
        geojson = get_project_geojson(self.project_uid, self.core_token, project_type=self.project_type)
        self.logger("Saving project geojson at {}".format(self.geojson_path))
        with open(self.geojson_path, "w") as fi:
            json.dump(geojson, fi)

        # Load vectors
        vlayer = QgsVectorLayer(self.geojson_path, self.project_uid, "ogr")
        QgsProject.instance().addMapLayer(vlayer)

        # Deactivate the project type selection after loading successfully
        self.projectType.setEditable(False)

        # spliting json module
        self.project_details = get_project_details(self.project_uid, self.core_token)
        vlayer_load(geojson, self.project_details)

    #zoom to layer
    def z_button(self):
        self.project_uid = self.projectUid.text()
        self.logger(f'Zooming to {self.project_uid} project layer.')
        # removing uid and name fields from json
        loaded_layers = qgis.utils.iface.activeLayer()
        loaded_layers.selectAll()
        canvas = qgis.utils.iface.mapCanvas()
        canvas.zoomToSelected(loaded_layers)
        loaded_layers.removeSelection()

    def save_project(self):
        # Save vectors
        # Upload vectors
        self.logger('Saving SenseHawk project... and')
        print(self.geojson_path)
        saved = save_project_geojson(self.geojson_path, self.project_uid, self.core_token, project_type=self.project_type)
        if saved:
            self.logger(str(saved))
            iface.messageBar().pushMessage(str(saved), level=Qgis.Info)
        else:
            self.logger("Project vectors does not exist, load project first...")

    def closeEvent(self, event):
        event.accept()
        # Delete project geojson
        os.remove(self.geojson_path)


