# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Load
#                                  A QGIS plugin
#  This window can be used to load SenseHawk projects needing quality check.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from ..sensehawk_apis.core_apis import get_ortho_tiles_url, get_project_geojson, get_project_details
from ..sensehawk_apis.terra_apis import get_terra_classmaps
from ..utils import containers_details, load_vectors, categorize_layer , organization_details, combobox_modifier, asset_details, groups_details
# from ..windows.projectLoad import ProjectLoadWindow
from ..windows.project_management.workspace import WorkspaceWindow


from qgis.PyQt import QtGui, QtWidgets, uic, QtGui
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer, QgsRectangle, QgsFeature, \
    QgsGeometry, QgsField, QgsCategorizedSymbolRenderer, QgsApplication, QgsTask
from qgis.PyQt.QtCore import Qt, QVariant, QSize
from qgis.gui import QgsMessageBar
import qgis
from qgis.utils import iface
from .project_management.datatypes import Asset, Container, Group

import os
import time


class HomeWindow(QtWidgets.QWidget):
    def __init__(self, login_obj):
        """Constructor."""
        super(HomeWindow, self).__init__()
        uic.loadUi(os.path.join(os.path.dirname(__file__), 'home.ui'), self)
        self.canvas_logger = login_obj.canvas_logger
        self.logger = login_obj.logger
        self.core_token = login_obj.core_token
        self.user_email = login_obj.user_email
        self.login_obj = login_obj
        self.iface = iface
        self.org_details = login_obj.org_details
        org_list = list(self.org_details.values())
        org_combobox = self.organization
        self.org = combobox_modifier(org_combobox, org_list)
        self.org.currentIndexChanged.connect(self.org_tree)
        self.projectbutton.setText("üëâüèº")
        self.projectbutton.setStyleSheet("background-color:#dcf6f7;")
        self.projectbutton.clicked.connect(self.show_asset_workspace)
        self.asset_combobox.currentIndexChanged.connect(self.asset_tree)
        self.asset_uid = None  
        logo_label = QtWidgets.QLabel(self)
        logo = QtGui.QPixmap(os.path.join(os.path.dirname(__file__), 'icon.svg'))
        logo = logo.scaled(350, 60, Qt.AspectRatioMode.KeepAspectRatioByExpanding)
        logo_label.setPixmap(logo)
        logo_label.setAlignment(Qt.AlignCenter)
        logo_label.show()
        self.layout.addWidget(logo_label)
        self.dock_widget = login_obj.dock_widget
        self.dock_widget.setWidget(self)
        # self.dock_widget.setFixedSize(340, 830)

    def asset_info(self, load_asset_task_status ,load_asset_task):
        if load_asset_task_status != 3:
            return None
        
        result = load_asset_task.returned_values
        # task response bit slow in few circumstances Dont remove below peice of code 
        if not 'asset_dict' in result:
            return None
        
        self.org.setEnabled(True)
        self.asset_details = result['asset_dict']
        self.user_id = result['user_id']
        self.apptype_details = result['apptype_dict']
        asset_list = list(a["name"] for a in self.asset_details.values()) 
        self.asset_combobox.setEnabled(True)
        self.asset_combobox.clear()
        self.asset_combobox = combobox_modifier(self.asset_combobox, asset_list) 
        self.canvas_logger(f'{self.org.currentText()} assets loaded..')
        

    def org_tree(self, value):
        try:
            self.org_uid = list(filter(lambda x: self.org_details[x] == self.org.currentText(), self.org_details))[0]
        except KeyError as e:
            self.logger(e)
        self.org.setEnabled(False)
        self.asset_combobox.setEnabled(False)
        
        load_asset_task = QgsTask.fromFunction("load_asset_task", asset_details, self.org_uid, self.core_token)
        QgsApplication.taskManager().addTask(load_asset_task)
        load_asset_task.statusChanged.connect(lambda load_asset_task_status: self.asset_info(load_asset_task_status, load_asset_task))

    def containers_info(self, asset_container_task_status, asset_container):
        if asset_container_task_status != 3:
            return None
        
        result = asset_container.returned_values
        if not 'containers_dict' in result:
            return None
        self.projectbutton.setEnabled(True)
        self.projectbutton.setStyleSheet("background-color:#dcf6f7;")
        self.containers_details = result['containers_dict']
        print('extracted asset level container details')
        
    def asset_tree(self):
        self.projectbutton.setEnabled(False)
        self.projectbutton.setStyleSheet("background-color:#f7b7ad;")
        try:
            self.asset_uid = list(filter(lambda x: self.asset_details[x]["name"] == self.asset_combobox.currentText(), self.asset_details))[0]
        except IndexError:
            pass
        print(self.org_uid, self.asset_uid)

        asset_container = QgsTask.fromFunction("Fetching asset level container", containers_details, self.asset_uid, self.org_uid, self.core_token)
        QgsApplication.taskManager().addTask(asset_container)
        asset_container.statusChanged.connect(lambda asset_container_task_status: self.containers_info(asset_container_task_status, asset_container))

    def parse_groups_info(self):
                                    # Container = {'uid':{'container_name':'container_uid','groups':[], x``,{}]}, 'container_name':{}}
                                    # Group = groups_dict[group['uid']] = (group['name'], project_details, group['container'])
        self.groups_dict = {}
        for group_uid, group_details in self.groups_details.items():
            if group_details[2]:
                group_container_dict = group_details[2]
                group_container_uid = list(group_container_dict.values())[0]
            else:
                group_container_uid = None
            self.groups_dict[group_uid] = Group(uid=group_uid,
                                                name=group_details[0],
                                                container_uid=group_container_uid,
                                                containers_dict=self.containers_dict,
                                                org_info = self.org_info,
                                                deal_id = group_details[3],
                                                projects_details=group_details[1])
        
    def parse_containers_info(self):
        self.containers_dict = {}
        for container_uid, container_details in self.containers_details.items():
            self.containers_dict[container_uid] = Container(container_uid, container_details["name"], self.asset, applications=container_details['applications_info'])
                                                     
    def show_asset_workspace(self):
        if not self.asset_uid:
            self.logger("Select Asset", level=Qgis.Warning)
            return None

        # list of all the groups in the asset and there respective projects  | {'group_name':('group_uid', {'project_name':'uid'}, {'container_name':'uid'})}
        self.org_info = {'uid':self.org_uid, 'name':self.org.currentText()}
        self.groups_details = groups_details(self.asset_uid, self.org_uid, self.core_token)
        asset_dict = self.asset_details[self.asset_uid]
        self.asset = Asset(asset_dict, self.org_uid)
        self.parse_containers_info()
        self.parse_groups_info()
        time.sleep(1)
        self.asset_workspace = WorkspaceWindow(self, self.iface)
        self.hide()
        self.asset_workspace.show()
    
