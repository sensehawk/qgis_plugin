# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Load
#                                  A QGIS plugin
#  This window can be used to load SenseHawk projects needing quality check.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """

from ..sensehawk_apis.core_apis import get_ortho_tiles_url, get_project_geojson, get_project_details
from ..sensehawk_apis.terra_apis import get_terra_classmaps

from ..utils import download_file, load_vectors, categorize_layer , organization_details, combobox_modifier, asset_details

from ..tasks import loadTask

from ..windows.projectLoad import ProjectLoadWindow

import os
import json
import time
import json

from qgis.PyQt import QtGui, QtWidgets, uic, QtGui
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsRasterLayer, QgsVectorLayer, QgsRectangle, QgsFeature, \
    QgsGeometry, QgsField, QgsCategorizedSymbolRenderer, QgsApplication, QgsTask
from qgis.PyQt.QtCore import Qt, QVariant, QSize
from qgis.gui import QgsMessageBar
from PyQt5.QtWidgets import QLineEdit, QCompleter
import qgis
from qgis.utils import iface
import time
import requests


class HomeWindow(QtWidgets.QWidget):
    def __init__(self, login_obj):
        """Constructor."""
        super(HomeWindow, self).__init__()
        uic.loadUi(os.path.join(os.path.dirname(__file__), 'home.ui'), self)
        self.canvas_logger = login_obj.canvas_logger
        self.logger = login_obj.logger
        self.core_token = login_obj.core_token
        self.user_email = login_obj.user_email
        self.iface = iface
        self.org_details = login_obj.org_details
        org_list = list(self.org_details.keys())
        org_combobox = self.organization
        self.asset_combobox = self.asset
        self.org = combobox_modifier(org_combobox, org_list)
        self.org.currentIndexChanged.connect(self.org_tree)
        self.projectbutton.setText("ðŸ‘‰")
        self.projectbutton.clicked.connect(self.show_project_load_window)
        self.asset_combobox.currentIndexChanged.connect(self.asset_tree)
        self.asset_uid = None  # Pre loading
        logo_label = QtWidgets.QLabel(self)
        logo = QtGui.QPixmap(os.path.join(os.path.dirname(__file__), 'icon.svg'))
        logo = logo.scaled(350, 60, Qt.AspectRatioMode.KeepAspectRatioByExpanding)
        logo_label.setPixmap(logo)
        logo_label.setAlignment(Qt.AlignCenter)
        logo_label.show()
        self.layout.addWidget(logo_label)
        self.dock_widget = login_obj.dock_widget
        self.dock_widget.setWidget(self)
        # self.dock_widget.setFixedSize(340, 830)

    def asset_info(self, load_asset_task_status ,load_asset_task):
        if load_asset_task_status != 3:
            return None
        
        result = load_asset_task.returned_values
        # task response bit slow in few circumstances Dont remove below peice of code 
        if not 'asset_list' in result:
            return None
        
        self.org.setEnabled(True)
        self.asset_details = result['asset_list']
        self.org_contianer_details = result['org_contianer_details']
        
        asset_list = list(self.asset_details.keys())
        self.asset_combobox.setEnabled(True)
        self.asset_combobox.clear()
        self.asset_combobox = combobox_modifier(self.asset_combobox, asset_list)
        self.canvas_logger(f'{self.org.currentText()} assets loaded..')
        

    def org_tree(self, value):
        try:
            org = self.org_details[self.org.currentText()]
        except KeyError:
            return None
        self.org.setEnabled(False)
        self.asset_combobox.setEnabled(False)
        load_asset_task = QgsTask.fromFunction("load_asset_task", asset_details, org, self.core_token)
        QgsApplication.taskManager().addTask(load_asset_task)
        load_asset_task.statusChanged.connect(lambda load_asset_task_status: self.asset_info(load_asset_task_status, load_asset_task))

    
    def asset_tree(self):
        self.org_uid = self.org_details[self.org.currentText()]
        self.asset_uid = self.asset_details.get(self.asset.currentText(), None)
        print(self.org_uid, self.asset_uid)

    def show_project_load_window(self):
        if not self.asset_uid:
            self.logger("Select Asset", level=Qgis.Warning)
            return None
        self.project_load_window = ProjectLoadWindow(self, self.iface)
        self.project_load_window.show()
        self.hide()

    