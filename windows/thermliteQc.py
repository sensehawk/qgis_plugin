# -*- coding: utf-8 -*-
# """
# /***************************************************************************
#  Therm Tools
#                                  A QGIS plugin
#  This window has access to Tools for Therm application.
#  Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
#                              -------------------
#         begin                : 2022-08-25
#         git sha              : $Format:%H$
#         copyright            : (C) 2022 by SenseHawk
#         email                : kiranh@sensehawk.com
#  ***************************************************************************/
#
# /***************************************************************************
#  *                                                                         *
#  *   This program is free software; you can redistribute it and/or modify  *
#  *   it under the terms of the GNU General Public License as published by  *
#  *   the Free Software Foundation; either version 2 of the License, or     *
#  *   (at your option) any later version.                                   *
#  *                                                                         *
#  ***************************************************************************/
# """
import os
import cv2
import uuid 

from qgis.PyQt.QtCore import Qt , QPoint , QRectF 
from qgis.PyQt import QtWidgets, uic
import qgis
from qgis.core import QgsMessageLog, Qgis, QgsApplication, QgsTask, QgsFeatureRequest, QgsPoint
from qgis.core import QgsField
from PyQt5.QtCore import QVariant

from PyQt5.QtWidgets import QPushButton,QLabel, QLineEdit
from PyQt5.QtGui import QKeySequence , QFont , QPainter , QPolygon , QImage
from PyQt5 import QtCore, QtGui, QtWidgets 
from datetime import datetime
from PIL import Image
from qgis.utils import iface


class PhotoViewer(QtWidgets.QGraphicsView):
    photoClicked = QtCore.pyqtSignal(QtCore.QPoint)

    def __init__(self, parent):
        super(PhotoViewer, self).__init__(parent)
        self._zoom = 0
        self._empty = True
        self._scene = QtWidgets.QGraphicsScene(self)
        self._photo = QtWidgets.QGraphicsPixmapItem()
        self._scene.addItem(self._photo)
        self.setScene(self._scene)
        self.setTransformationAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.setResizeAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.setBackgroundBrush(QtGui.QBrush(QtGui.QColor(30, 30, 30)))
        self.setFrameShape(QtWidgets.QFrame.StyledPanel)


    def hasPhoto(self): 
        return not self._empty

    def fitInView(self, scale=True):
        rect = QtCore.QRectF(self._photo.pixmap().rect())
        if not rect.isNull():
            self.setSceneRect(rect)
            if self.hasPhoto():
                unity = self.transform().mapRect(QtCore.QRectF(0, 0, 1, 1))
                self.scale(1 / unity.width(), 1 / unity.height())
                viewrect = self.viewport().rect()
                scenerect = self.transform().mapRect(rect)
                factor = min(viewrect.width() / scenerect.width(),
                             viewrect.height() / scenerect.height())
                self.scale(factor, factor)
            self._zoom = 0

    def setPhoto(self, pixmap=None):
        self._zoom = 0
        if pixmap and not pixmap.isNull():
            self._empty = False
            self.setDragMode(QtWidgets.QGraphicsView.NoDrag)
            self._photo.setPixmap(pixmap)
        else:
            self._empty = True
            self.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)
            self._photo.setPixmap(QtGui.QPixmap())
        self.fitInView()

    def wheelEvent(self, event):
        if self.hasPhoto():
            if event.angleDelta().y() > 0:
                factor = 1.25
                self._zoom += 1
            else:
                factor = 0.8
                self._zoom -= 1
            if self._zoom > 0:
                self.scale(factor, factor)
            elif self._zoom == 0:
                self.fitInView()
            else:
                self._zoom = 0

    def toggleDragMode(self):
        if self.dragMode() == QtWidgets.QGraphicsView.NoDrag:
            self.setDragMode(QtWidgets.QGraphicsView.ScrollHandDrag)
        elif not self._photo.pixmap().isNull():
            self.setDragMode(QtWidgets.QGraphicsView.NoDrag)

    def mousePressEvent(self, event):
        if self._photo.isUnderMouse():
            self.photoClicked.emit(self.mapToScene(event.pos()).toPoint())
        super(PhotoViewer, self).mousePressEvent(event)

THERMLITE_QC_UI, _ = uic.loadUiType(os.path.join(os.path.dirname(__file__), 'thermliteQc.ui'))

class ThermliteQcWindow(QtWidgets.QDockWidget, THERMLITE_QC_UI):

    def __init__(self, project):
        """Constructor."""
        super(ThermliteQcWindow, self).__init__()
        self.setupUi(self)
        self.project = project
        self.iface = iface
        self.active_layer = self.project.vlayer
        self.canvas = self.iface.mapCanvas()
        self.viewer = PhotoViewer(self)
        self.viewer.photoClicked.connect(self.photoClicked)
        self.viewer.setGeometry(20,60,612,540)
        self.image_tagged_info = {}
        self.issue_list = [[]]
        self.temp_issueUid = 100
        self.markerlocatoin = [0,0]

        #select folder path
        self.folder_path = QPushButton(self)
        self.folder_path.setText('Select Image Folder')
        self.folder_path.setGeometry(QtCore.QRect(20,20,612,27))
        self.folder_path.clicked.connect(self.folderpath)
        
        #Current image and marker location info
        self.image_txt = QLabel(self)
        self.image_txt.setText('Image Name:')
        self.image_txt.setGeometry(QtCore.QRect(20, 610, 100, 27))
        self.current_loaded_img = QLineEdit(self)
        self.current_loaded_img.setGeometry(QtCore.QRect(140, 610, 300, 27))
        self.marker_txt = QLabel(self)
        self.marker_txt.setText('Marker:')
        self.marker_txt.setGeometry(QtCore.QRect(460, 610, 80, 27))
        self.marker_info = QLineEdit(self)
        self.marker_info.setGeometry(QtCore.QRect(530, 610, 100, 27))

        # # Navigation buttons
        self.nxt_img = QPushButton(self)
        self.nxt_img.setText('>')
        self.nxt_img.setShortcut('d')
        self.nxt_img.setGeometry(QtCore.QRect(410, 650, 220, 27))
        self.nxt_img.clicked.connect(self.load_nxtimg)
        self.previous_img = QPushButton(self)
        self.previous_img.setText('<')
        self.previous_img.setShortcut('a')
        self.previous_img.setGeometry(QtCore.QRect(20,650, 220, 27))
        self.previous_img.clicked.connect(self.load_previous)

        # Temperature widgets
        self.temp_txt = QLabel(self)
        self.temp_txt.setText('Temperature:')
        self.temp_txt.setGeometry(QtCore.QRect(20, 710, 100, 27))
        self.delta_temp = QLineEdit(self)
        self.delta_temp.setReadOnly(True)
        self.delta_temp.setGeometry(QtCore.QRect(140, 710, 100, 27))
        self.temp_patch_txt = QLabel(self)
        self.temp_patch_txt.setText('TempPatchSize:')
        self.temp_patch_txt.setGeometry(QtCore.QRect(20, 750, 110, 27))
        self.patch_x = QLabel('x:', self)
        self.patch_x.setGeometry(QtCore.QRect(40, 790, 30, 30))
        self.temp_patch_x = QLineEdit(self)
        self.temp_patch_x.setText('30')
        self.temp_patch_x.setGeometry(QtCore.QRect(60, 790, 50, 27))
        self.patch_y = QLabel('y:', self)
        self.patch_y.setGeometry(QtCore.QRect(120, 790, 30, 30))
        self.temp_patch_y = QLineEdit(self)
        self.temp_patch_y.setText('30')
        self.temp_patch_y.setGeometry(QtCore.QRect(140, 790, 50, 27))

        #marker and tag button
        self.drag_button = QPushButton(self)
        self.drag_button.setText('Pan button')
        self.drag_button.clicked.connect(self.pixInfo)
        self.drag_button.setShortcut('space')
        self.drag_button.setGeometry(QtCore.QRect(410, 710, 220, 27))
        self.tag_button = QPushButton(self)
        self.tag_button.setText('Tag Image')
        self.tag_button.setGeometry(QtCore.QRect(410, 750, 220, 27))
        self.tag_button.clicked.connect(self.tag_image)
        self.image_index = 0
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self)

    def get_timestamp(self, image_path):
        ts = Image.open(image_path)._getexif()[36867]
        return ts

    def folderpath(self):
        required_fields = {'timestamp':QVariant.String,'temperature_difference':QVariant.Double,  'No_images':QVariant.Double,
                            'temperature_min':QVariant.Double,'temperature_max':QVariant.Double, 'temp_uid':QVariant.Double}
        
        self.fields_validator(required_fields, self.active_layer)

        self.filepath = QtWidgets.QFileDialog.getExistingDirectory(self, 'Hey! Select a File')
        self.image_list = os.listdir(self.filepath)
        all_timestamps = []
        for image in self.image_list:
            if image.endswith('.jpg') or image.endswith('.JPG'):
                ts = self.get_timestamp(os.path.join(self.filepath, image))
                all_timestamps.append([image, [datetime.strptime(ts, '%Y:%m:%d %H:%M:%S'), ts]]) 
            else:
                continue
        self.sorted_images = sorted(all_timestamps, key=lambda x: x[1]) 

    def pixInfo(self):
        self.viewer.toggleDragMode()

    def load_nxtimg(self):
        self.image_index += 1
        self.image_path = os.path.join(self.filepath, self.sorted_images[self.image_index][0])
        self.current_loaded_img.setText(self.sorted_images[self.image_index][0]) 
        self.image = cv2.imread(self.image_path)
        self.height, self.width, self.channel = self.image.shape
        self.bytesPerLine = 3 * self.width
        qImg = QImage(self.image.data, self.width, self.height, self.bytesPerLine, QImage.Format_RGB888).rgbSwapped()
        self.current_image = QtGui.QPixmap(qImg)
        self.viewer.setPhoto(self.current_image)
        

    def load_previous(self):
        self.image_index -=1
        self.image_path = os.path.join(self.filepath, self.sorted_images[self.image_index][0])
        self.current_loaded_img.setText(self.sorted_images[self.image_index][0]) 
        self.image = cv2.imread(self.image_path)
        self.height, self.width, self.channel = self.image.shape
        self.bytesPerLine = 3 * self.width
        qImg = QImage(self.image.data, self.width, self.height, self.bytesPerLine, QImage.Format_RGB888).rgbSwapped()
        self.current_image = QtGui.QPixmap(qImg)
        self.viewer.setPhoto(self.current_image)

    def draw_box(self, imagecopy, x, y, w=32, h=32, image_w=640, image_h=512):
        x1 = max(int(x-w/2), 0)
        y1 = max(int(y-h/2), 0)
        x2 = min(int(x+w/2), image_w)
        y2 = min(int(y+h/2), image_h)
        image = cv2.rectangle(imagecopy, (x1, y1), (x2, y2), [0, 0, 255], 2, 1)
        image = cv2.drawMarker(imagecopy, (x, y), [0, 255, 0], cv2.MARKER_CROSS, 2, 2)
        return image
    
    def photoClicked(self, pos):
        if self.viewer.dragMode()  == QtWidgets.QGraphicsView.NoDrag:
            self.marker_info.setText('%d, %d' % (pos.x(), pos.y()))
            self.markerlocatoin = [pos.x(),pos.y()]
            x = pos.x()
            y = pos.y() 
            w = int(self.temp_patch_x.text())
            h = int(self.temp_patch_y.text())
            self.painted_image = self.draw_box(self.image.copy(), x, y, w, h)
            qImg = QImage(self.painted_image.data, self.width, self.height, self.bytesPerLine, QImage.Format_RGB888).rgbSwapped()
            self.current_image = QtGui.QPixmap(qImg)
            self.viewer.setPhoto(self.current_image)
            print(pos.x(), pos.y())

    def fields_validator(self, required_fields, layer):
        fname = list(required_fields.keys())
        for field in fname:
            variant = required_fields[field]
            if layer.fields().indexFromName(field) == -1:
                fieldz = QgsField(field , variant)
                layer.dataProvider().addAttributes([fieldz])
                layer.updateFields() # update layer fields after creating new one
        layer.commitChanges()
        layer.startEditing()
        
    def tag_image(self):
        
        self.active_layer.commitChanges()
        self.active_layer.startEditing()

        *_, last = self.active_layer.getFeatures()
        self.active_layer.select(last.id())

        sfeature = self.active_layer.selectedFeatures()[-1]
        sx = sfeature.geometry().centroid().asPoint().x()
        sy = sfeature.geometry().centroid().asPoint().y()
        
        print(sx,sy ,'and' , self.issue_list[-1])

        if sfeature['temp_uid'] is None or [sx, sy] != self.issue_list[-1]:
            print('adding in new issue')
            self.temp_issueUid += 1
            sfeature['temp_uid'] = self.temp_issueUid
            sfeature['timestamp'] = str(self.sorted_images[self.image_index][1][1])
            self.active_layer.updateFeature(sfeature)
            self.image_tagged_info[self.temp_issueUid] = [{self.sorted_images[self.image_index][0]:self.markerlocatoin}]
            self.issue_list.append([sx, sy])
            print(self.image_tagged_info)
        else:
            print('adding in existing isuues')
            self.image_tagged_info[self.temp_issueUid].append({self.sorted_images[self.image_index][0]:self.markerlocatoin})
            self.active_layer.updateFeature(sfeature)
            print(self.image_tagged_info)
        